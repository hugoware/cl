
- slide:
    mode: overlay
    title: Headings and Paragraphs
    content: |
      In this lesson we're going to start working with different types of [define html_element Elements] used for formatting text in [define html].

      There are many [define html_element Elements] you can use to display text in [define html], but in this lesson we will be focusing on the **heading** and **paragraph** [define html_element Elements].


- slide:
    content: |
      The **heading** [define html_element Elements] are used when starting new sections of content on a page. By default, headings are displayed in a large and bold font.

      [snippet heading_example]


- slide:
    content: |
      Paragraphs are used to display sections of text. [define web_browser s] will generally display **paragraphs** with additional spacing around them.

      In most cases, you'll have more **paragraphs** than **headings** on a page.


- slide:
    content: |
      Headings are also used by screen readers to help blind people identify sections of your web page, as well as help [define search_engine s] understand the structure of the content.

      You should not use **headings** as a means to change the size or boldness of a font. In later lessons we will learn the correct way to change the style of text on your web page.


- slide:
    mode: popup
    controller: waitForIndex

    content: |
      Let's get started adding some headings to a page.

      Open the file named `index.html` in the [define file_browser] on the left side of the screen.


- slide:
    controller: insertH1
    content: |
      At this point you're already familiar with writing [define html_element s]. Let's start by adding a `h1` [define html_element element] to this page.

      [snippet heading_example]


- slide:
    controller: insertAllHeadings
    content: |
      Okay, let's do that again for the remaining heading [define html_element elements].

      There are six in total heading elements in [define html]. Add the remaining five heading elements to this page.

- slide:
    title: Using Paragraphs
    mode: overlay
    content: |
      Paragraphs are another way to add text to your webpage, but these aren't intended to mark new sections on the page.

      Instead, paragraphs are typically used for large passages of text.


- slide:
    mode: popup
    controller: insertParagraph
    content: |
      Add a new paragraph to this page by using the `p` tag.

      [snippet paragraph_example]

- slide:
    content: |
      In each of the examples we've done so far all of the text has been on one line. However, HTML allows you to put text on multiple lines.

- slide:
    mode: popup
    controller: insertMultilineParagraph
    content: |
      Let's try that again, but this time we're going to add a new line in the `p` [define html_element Element]

      [snippet paragraph_multiline]

- slide:
    content: |
      You'll notice that even though the text is on multiple lines, the [define codelab_html_preview] displays all of the text on a single line.

      In HTML, new lines are displayed as a single space between characters.

- slide:
    content: |
      This creates a problem when we're trying to add a new line to a web page. However, like with most things in HTML, we can use an [define html_element] to solve this problem.

- slide:
    title: Using Line Breaks
    mode: overlay
    content: |
      The `br` tag is used to create line breaks, meaning that a new line is displayed wherever the [define html_element] is placed in the code.

      [snippet linebreak]

- slide:
    content: |
      You probably noticed that this [define html_element] looks different than the other tags you've written so far.

      [snippet linebreak highlight:4,2]

      Unlike the other HTML elements you've added, this [define html_element Element] does not have a separate closing tag.

- slide:
    content: |
      This is called a [define void_element], meaning that it does not have any content.

      You'll also hear these referred to as _self-closing_ tags or _empty tags_.

- slide:
    mode: popup
    content: |
      There are many other [define html_element s] that are also [define void_element s]. You'll learn more about these and later lessons.

- slide:
    controller: insertLineBreak
    content: |
      Let's add a `br` [define html_element element] between the two lines from the previous example.

      [snippet insert_linebreak]

- slide:
    content: |
      It's important to learn what different [define html_element Elements] can do in [define html], but it's also important to learn which [define html_element s] to avoid.

      For example, the `br` [define html_element Element] is **not the recommended** way to insert new lines in an [define html] file.

- slide:
    content: |
      In fact, the recommended way is to use multiple paragraphs. It might seem like we're adding extra code, but this actually becomes immensely useful when we start using [define css] to apply visual styles to web pages.

- slide:
    controller: replaceLineBreak
    content: |
      Let's go back and replace the `br` [define html_element Element] by using two separate `p` [define html_element Elements].

      [snippet replace_linebreak]

- slide:
    content: |
      Although it doesn't seem like much of a change, it's recommended to use `p` [define html_element Elements] instead of a `br` [define html_element Element].

      This will make much more sense when we introduce [define css] in later lessons!

- slide:
    mode: overlay
    content: |
      Great work! let's review what we've learned in this lesson!

- question:
    title: New lines in [define html] are displayed...

    explain: |
      Adding a new line to a webpage will display as a single space. Also, interestingly, multiple spaces in HTML are also displayed has a single space.

    choices:
      - ... as a space
      - ... as a tab
      - ... as a normal new line
      - ... as a semi-colon

- question:
    title: The `br` [define html_element Element] is known as a...
    content: |
      [snippet linebreak]

    explain: |
      A `br` [define html_element Element] is known as a [define void_element], meaning it does not have content. A [define void_element] also does not have a separate closing tag.

    choices:
      - Void Element
      - Zero Element
      - Terminator Element
      - Bytecode Element

- question:
    title: Using the `h1` [define html_element Element] is a great way to make large and bold text

    explain: |
      By default, the heading elements are displayed using bold letters. However, there are much better ways to apply visual styles to your web page.

    choices:
      - "False"
      - "True"

- question:
    title: The `br` [define html_element Element] is the recommended way to separate lines of text

    explain: |
      Using the `br` [define html_element Element] will separate text onto multple lines, but it's actually recommended to use `p` [define html_element Elements] instead.

    choices:
      - "False"
      - "True"

- slide:
    mode: popup
    content: |
      As you can see, HTML has multiple [define html_element Elements] you can use to add content to your webpages.

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!



# - question:
#     count: 4   # optional question count
#     title: Main title
#     
#     hint: Optional helpful hint

#     explain: |
#       After the question is finished hint

#     choices:
#       - correct answer
#       - wrong answer 1
#       - wrong answer 2
#       - wrong answer 3

# - slide:
#     flags: +OPEN_FILE
#     emote: happy
#     controller: name
#     mode: popup
#     content: |
#       Way to go! You've finished this lesson!
#       
#       [snippet name highlight:0,5|20,5]
#       
#       [snippet html preview:50%]
#       
#       [image default.png]
#       
#       [image full.jpg frame]
#       
#       Inline replacement is done using ||does|duz||
#       
#       A normal [define html] is like this
#       
#       A lowercase [define html l] is like this
#       
#       A plural [define html p] is like this
#       A plural [define html s] or like this
#       
#       Can be combined as [define html lp] [define html ls]
#       
#       
