- slide:
    mode: overlay
    title: Using Hyperlinks
    content: |
      In this lesson we're going to discuss using [define hyperlink s] to connect web pages together.

      [define hyperlink s] are more commonly known as simply *links*. These are the clickable areas on a web page that are used to navigate from one location to another on the [define internet].

- slide:
    content: |
      This is an example of a [define hyperlink]. Despite the fact that it's typically called a "hyperlink", the correct [define html_element] to use is the `a` [define html_element Element].

      [snippet base_link]

      This can be confusing for new developers since there's also a `link` [define html_element Element] that does something completely different.


- slide:
    content: |
      For now, just remember that a [define hyperlink] is created using the `a` [define html_element Element].

      [snippet base_link]

- slide:
    content: |
      Something worth noting is that an `a` [define html_element Element] allows for content, which means that whatever is inside of this [define html_element Element] is the clickable area for the [define hyperlink link].

      [snippet base_link highlight:27,13]

      In this case, the content is the text _"Go to website"_. By default, a web browser would display this using blue text that is underlined.

- slide:
    content: |
      Other [define html_element s] can also be used inside of a [define hyperlink]. Another common [define html_element] used is the `img` [define html_element Element].

      [snippet img_link highlight:27,22]

      Using an `img` [define html_element] would create a clickable image on the web page.

- slide:
    content: |
      The next thing to look at is the [define html_attribute Attribute] used with a [define hyperlink]. The `href` [define html_attribute Attribute] is the _hypertext reference_. 

      [snippet base_link highlight:3,20]

      This decides the location of where the browser should navigate to when the [define hyperlink] is clicked. In this example, the location the browser will navigate to is the file `website.html`

- slide:
    content: |
      The value inside of the `href` [define html_attribute Attribute] is called a [define url]. This stands for *Uniform Resource Locator*, which is a very technical way of saying _a location of a file or website on the [define internet]_.

      [snippet base_link highlight:3,20]

      In later lessons we will learn a lot more about [define url s] and how they work. For now, just remember that it's essentially an address for something on the [define internet]

- slide:
    mode: popup
    content: |
      Let's try connecting a few web pages together using the `a` [define html_element Element].

- slide:
    waitForFile: /index.html
    content: |
      There are a few different pages already added to this project. Let's start by making changes to `index.html`

      Open the `index.html` file by [define double_click double clicking] on it.

- slide:
    content: |
      This page already has an `a` [define html_element Element] but it isn't clickable yet. This is because it's missing an `href` [define html_attribute Attribute].

- slide:
    controller: hrefToAnimals
    content: |
      Let's update the [define hyperlink link] to include an `href` [define html_attribute Attribute] so it will navigate to `||/animals.html|animals.html||`.

- slide:
    controller: navigateToList
    content: |
      Let's make sure that the [define hyperlink link] works as expected. Try to navigate to `animals.html` by clicking on *"See the animals"*

- slide:
    highlight: $preview .url
    content: |
      That worked! We were able to navigate to the `animals.html` page!

      You'll notice that the address bar has changed and now says `||/animals.html|animals.html||`.

- slide:
    content: |
      However, this page doesn't have a link that returns to the previous page so we're not able to navigate back.

      Let's add another [define hyperlink link] to this page to take us back to `index.html`.

- slide:
    waitForFile: /animals.html
    content: |
      Start by opening the `animals.html` file by [define double_click double clicking] on it so we can make some changes.

- slide:
    highlight: $workspace .tab[file="/animals.html"]
    controller: showSwitchingTabs
    content: |
      You'll notice that now we have more than one file open. You can switch back and forth between the two files by clicking on the tab of the file you want to view.

      This is very useful when you're trying to work with more than one page at a time.

- slide:
    controller: requireAnimalsTab

- slide:
    controller: hrefToIndex
    content: |
      Alright, let's continue adding a [define hyperlink link] to take the user back to the `index.html` page.

      Follow along with instructions to create a complete [define hyperlink link].

- slide:
    controller: navigateIndex
    content: |
      Before we continue, let's make sure the [define hyperlink links] behave as expected. 

      Navigate to `index.html` and then back to the `animals.html` page.

- slide:
    controller: addSingleImageLink
    content: |
      Let's add some more [define hyperlink links] to the `animals.html` page, but this time let's use an `img` [define html_element Element]!

      Follow along with the instructions to add an image [define hyperlink link] to one of the animal facts

- slide:
    controller: navigateSinglePage

- slide:
    content: |
      Let's practice that a few more times by adding the remaining animal images as [define hyperlink links] to each of their pages.

      Code hints will be turned off this time so make sure to look at the previous example for help. If you get stuck, use the *"Enable Hints"* button to turn them back on.

- slide:
    controller: addAllImageLinks
    content: |
      Add image [define hyperlink links] for the remaining animals like you did with the %%animalType%%.

- slide:
    controller: navigateAnimalPages

- slide:
    emote: happy
    content: |
      Great work! We've created a whole website with [define hyperlink links] that connect each of the pages together!

- slide:
    mode: overlay
    content: |
      We've learned a lot in this lesson so let's take a few minutes to review!

- question:
    title: What is another name for a *link* on a web page?

    explain: |
      Links are also known as [define hyperlink s] although most people will use the former name as opposed to the latter.

    choices:
      - Hyperlink
      - Hypercard
      - URL Binder
      - Meta Resource 

- question:
    title: What is the `a` [define html_element Element] used for?

    explain: |
      The `a` element is used to create [define hyperlink s]. Hyperlinks can be used to navigate between different locations on the [define internet] among other things.

    choices:
      - Creating links to other pages
      - Displaying images and videos
      - Meta information like author names and page keywords
      - Setting a font to use bold letters

- question:
    title: What does the phrase **URL** stand for?

    explain: |
      URL stands for *Uniform Resource Locator*. Although they're not exactly the same, you'll sometimes hear developers call them a *||URI|u r i||* instead.

    choices:
      - Uniform Resource Locator
      - Undefined Rail Laser
      - Unified Radio Logistics
      - Unidirectional Repeating Loopback

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!

