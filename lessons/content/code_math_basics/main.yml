- slide:
    mode: overlay
    title: Basic Arithmetic
    content: |
      In this lesson we're going to start learning the capabilities of [define javascript JavaScript's] Arithmetic [define code_operator ls].

- slide:
    content: |
      An [define code_operator l] is simply a symbol that does something using other values. This is called an _"operation"_.

      [snippet operator_example]

      [define javascript] has Arithmetic operations, such as adding numbers together, as well as Logical operations, such as checking `true` and `false` conditions.

- slide:
    content: |
      This example uses Arithmetic operations to add two numbers together. The operator in this example is the `+` sign.

      [snippet operator_example highlight:19,6]

- slide:
    content: |
      After that, Logical operations are used to compare if the [define code_variable l] ||`totalCookies`|total cookies|| is less than the number `20`.

      [snippet operator_example highlight:32,17]

      In this case, the [define code_operator l] being used is the `<` sign.


- slide:
    content: |
      [define javascript] has other types of [define code_operator ls] that you will eventually use. In this lesson we're going to be focusing on math operations that you're already familiar with.

- slide:
    content: |
      In [define javascript], you can use the `+` sign to perform addition.

      [snippet math_basics highlight:0,16]

- slide:
    content: |
      The ||`-`|minus|| sign is used for subtraction.

      [snippet math_basics highlight:17,22]

- slide:
    content: |
      Division is performed with the `/` character.

      [snippet math_basics highlight:40,20]

- slide:
    content: |
      And lastly, multiplication is done using the `*`.

      [snippet math_basics highlight:61,21]

- slide:
    content: |
      [define javascript] has many more math operations, but in this lesson we will be focusing on the basics.

      [snippet math_basics]

- slide:
    content: |
      Sequences of numbers like these are typically called [define javascript_expression s].

      [snippet math_expression highlight:13,10]

      An [define javascript_expression l] is a set of literals, such as [define javascript_string ls] and numbers, [define code_variable ls], and [define code_operator ls] that become a single value after they've been evaluated.

- slide:
    content: |
      For example, this [define javascript_expression l] is made up of 5 parts.

      [snippet math_expression highlight:13,1|15,1|17,2|20,1|22,1]

      When the [define javascript_expression l] is evaluated, [define javascript] will take a value from each side of an [define code_operator l] and then perform the math required.

- slide:
    content: |
      When this code is run, [define javascript] would take the numbers `5` and `10`, and then use the `+` sign to add them together. This ends up with the number `15`.

      [snippet math_expression highlight:13,6|13,10]

      After that, [define javascript] would take the number `15` and subtract the next value, which is the number `8`.

- slide:
    content: |
      After performing each of these [define javascript_expression ls], the value is then placed in to the [define code_variable l] named `result`.

      [snippet math_expression highlight:4,6]

      **The final value for the [define code_variable l] `result` would be `7`!**
    
- slide:
    mode: popup
    content: |
      Let's try performing a few math operations of our own.

- slide:
    waitForFile: /main.js
    fileName: main.js
    
- slide:
    highlight: '#preview'
    content: |
      In this lesson we're going to introduce a new way to write messages using the `console`
    
      Unlike the `alert` message box, this will show messages in the output area without needing to press the **OK** button.

- slide:
    controller: tryConsole
    content: |
      Press **Run Code** to see the `console.log` write a message to the [define codelab_code_output] area.

- slide:
    controller: basicMath1
    content: |
      Let's try out some math operations. Follow along with the instructions to create some simple expressions.
    
- slide:
    content: |
      Let's try that again, but this time without any code hints. If you get stuck, use the **Show Hints** button to turn them back on.

- slide:
    controller: basicMath2
    content: |
      Write two more `console.log` messages using different math operations each time. Like with the previous examples, only use numbers from 1 to 9999.

- slide:
    mode: overlay
    content: |
      So far each of the examples we've worked on only use two numbers and a single math operator, however, [define javascript] is able to understand far more complex expressions.

- slide:
    content: |
      In this example you can see that these [define javascript_expression ls] use even more numbers and [define code_operator ls].

      [snippet math_complex]

- slide:
    content: |
      The value of ||`example1`|example 1|| ends up being the number `5`. The longer expression for  ||`example2`|example 2|| evaluates to the number `13`.

      [snippet math_complex highlight:15,9|41,20]

      But the end result for ||`example3`|example 3|| is deceptively more complicated.

- slide:
    content: |
      The value for ||`example3`|example 3|| ends up being the number `1`. This might seem surprising, but it's the expected result.

      [snippet math_complex highlight:78,9]

      As it turns out, [define javascript] will automatically use [define order_of_operations] when performing math.

- slide:
    content: |
      [define order_of_operations] is the sequence in which math expressions are evaluated. You might have heard your teacher mention this in school before as ||**PEMDAS**|pim daas||.

      [snippet math_complex highlight:82,5]

      When you follow the [define order_of_operations], multiplication should be done before addition. This will dramatically change the result of the [define javascript_expression l].
          
- slide:
    content: |
      As a reminder, ||**PEMDAS**|pim daas|| states that math should be evaluated in the following order.

      **Parentheses, Exponentials, Multiply, Divide, Add**, then **Subtract**

      This will be important when you create more complicated math expressions.

- slide:
    content: |
      We'll learn more about [define order_of_operations] in later lessons, but for now let's continue to work with basic Arithmetic operations.

- slide:
    mode: popup
    content: |
      Let's try to write a few expressions that use several math operations.

- slide:
    controller: basicMath3
    content: |
      Follow along with the instructions and write two more expressions that use multiple numbers and [define code_operator sl]. 

- slide:
    mode: overlay
    content: |
      You might remember from earlier in the lesson that [define javascript_expression ls] allow for [define code_variable ls] to be used along with [define code_operator ls].

      [snippet math_variable size:medium]

- slide:
    content: |
      In this example, two [define code_variable ls] are declared each with a number of their own.

      [snippet math_variable size:medium highlight:0,25|26,21]

- slide:
    content: |
      The last of the [define code_variable ls] is an [define javascript_expression l] that multiplies the previous two [define code_variable ls] together.

      [snippet math_variable size:medium highlight:67,30]

      Even though there aren't any numbers typed in the expression for ||`totalCookies`|total cookies||, the result for that [define code_variable l] is `36`!

- slide:
    content: |
      Of course, you aren't limited to only using [define code_variable ls] with other [define code_variable ls].

      [snippet math_average size:medium highlight:0,47]

      This example asks for three separate numbers, then adds them all together into a [define code_variable l] named `totalBooks`.
    
- slide:
    content: |
      After that, `totalBooks` is divided by the **number** of students and assigned to a new [define code_variable l] named `average`.
      
      [snippet math_average size:medium highlight:49,33]

      [define javascript] knows to use whatever number has been assigned to `totalBooks` when evaluating the [define javascript_expression l].

- slide:
    content: |
      Being able to use [define code_variable ls] with [define javascript_expression ls] is extremely powerful and will become increasingly useful as you learn more about [define javascript].

      [snippet math_average size:medium]

- slide:
    mode: popup
    content: |
      Let's try to use some [define code_variable ls] and [define javascript_expression ls] together.

- slide:
    controller: usingVariables
    content: |
      Try declaring some variables and then using `console||.| dot ||log` to display them in the [define codelab_code_output] area.

      [snippet variable_example size:xsmall]

- slide:
    content: |
      Because [define code_variable ls] can be declared separately from where they are used, you're also able to change the value of a [define code_variable l]. When the code is executed the new values will be used instead!

- slide:
    content: |
      This is a very simple example, but as code becomes more complicated the ability to use [define code_variable ls] from different locations becomes critical for writing complex computer programs!

- slide:
    controller: modifyVariables
    content: |
      Try changing the values for both the `||cookiesPerPerson|cookies per person||` and `||totalPeople|total people||` to new numbers, then press **Run Code** to see the new total value.

- slide:
    content: |
      We've learned a lot in this lesson so let's take a break and review what we've covered so far!

- question:
    mode: overlay
    inline: true
    title: What is the operator used to **multiply** numbers?

    explain: |
      Multiplication is performed using the `*` character.

      **Fun fact**: The `×` sign is known as the multiplication symbol, but since it could be confused with a [define code_variable l] named `x`, it's considered better to use an `*`.

    choices:
      - '`*`'
      - '`+`'
      - '`-`'
      - '`/`'

- question:
    inline: true
    title: What is the operator used to **divide** numbers?

    explain: |
      Division is performed using the `/` character.

      **Fun fact**: Math can do some pretty wild things! Did you know that `5 ||/|divided by|| 0.25` and `5 ||*|times|| 4` are both equal to `20`?

    choices:
      - '`/`'
      - '`*`'
      - '`+`'
      - '`-`'

- question:
    title: What does **Order of Operations** mean?

    explain: |
      The [define order_of_operations] is the rules that decide which math operations are performed first in an expression. You probably have heard this mentioned before in math class as **||PEMDAS|pim daas||**.

    choices:
      - The specific order that math expressions should be evaluated
      - The command in JavaScript to convert numbers to strings
      - A program that removes unused code from a file
      - The scientific name for a negative number
      
- question:
    title: What is the value of `result` after the math expression?
    inline: true

    content: |
      [snippet question_1]

    explain: |
      Following the [define order_of_operations] means you must first perform **addition** and then **subtraction**. This means that `2 + 4` becomes `6`, and then `6 ||-|minus|| 2` results in `4` again!

    choices:
      - '`4`'
      - '`2`'
      - '`6`'
      - '`8`'

- question:
    title: What is the value of `result` after the math expression?
    inline: true

    content: |
      [snippet question_2]        

    explain: |
      Even though this [define javascript_expression l] is out of order, [define javascript] will follow the [define order_of_operations] and start by performing the **multiplication** step first. This means that `4 ||*|times|| 2` becomes `8`, and then `8 + 2` results in `10`!

    choices:
      - '`10`'
      - '`8`'
      - '`12`'
      - '`16`'
      
- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!

      