-
  slide:
    mode: overlay
    title: Introduction to Creating Web Pages
    content: |
      Welcome to your first lesson on creating web pages!

      As you work through this lesson you will be asked to complete certain tasks before you can move onto the next step.

-
  slide:
    content: |
      In this tutorial we're going to start learning the basics of creating web pages.

      However, before we start learning how to write code, it's best to take a little bit of time and learn how web pages work _behind the scenes_.

-
  slide:
    controller: browserType

-
  slide:
    content: |
      Generally speaking, web pages viewed in the browser are created using three different core technologies. These are [define html], [define css], and [define javascript].

      [image tech.png]

      In fact, it's entirely possible that every single website you've ever visited has used all three of these technologies at the same time!

-
  slide:
    content: |
      [define html] is the foundation for all [define web_page web pages]. [define html] is a language that determines the words and content that are displayed in the web browser.

      [image html-focus.png]

      In a sense, [define html] is what your web page _says_.

-
  slide:
    content: |
      [define css] is a language that's used to determine the visual appearance of a web page. The colors, font sizes, layout, and other design properties of your web page are defined by the rules in [define css]

      [image css-focus.png]

      Simply put, [define css] decides what your web page _looks like_.

-
  slide:
    content: |
      Finally, [define javascript] is a programming language that can be used to create logic and behaviors on a web page. Many modern websites use [define javascript] to create complicated applications that run entirely in the [define web_browser browser]

      [image javascript-focus.png]

      Generally speaking, [define javascript] decides what your web page _will do_.

-
  slide:
    content: |
      Each time you visit a [define website website], code files like [define html], [define css], and [define javascript] are sent to your computer. The [define web_browser] uses the instructions in each of these files to create the [define web_page web page] you see on the screen.

      [image build.jpg frame]

-
  slide:
    content: |
      There's a lot to learn when it comes to creating web pages, but with practice and time, you'll be building entire websites before you know it.
      
      [image html-focus.png]

      At the start of this tutorial series, we're going to focus on learning [define html] and then introduce [define css] and [define javascript] at a later time.

- slide:
    emotion: happy
    content: Great, let's get started learning some [define html]!

- slide:
    title: What is HTML?
    content: |
      [define html] is a language that's used to describe the information found on a web page. It's written using instructions called [define html_element Elements]. An [define html_element] is made up of several parts called [define html_tag tags].

      Below is an example of a simple [define html_element].

      [snippet html_tag_example]

      Let's go over what each part of this code example ||does|duz||. 

- slide:
    content: |
      The first part of an [define html_element] is the **Opening** [define html_tag tag]. It's written using a `<` sign, followed by the name of the tag, and then a `>` sign.
      
      [snippet html_tag_example highlight:0,4]

      This tells the [define web_browser] what rules to follow for everything that comes after the opening tag.

- slide:
    content: |
      The `<` and `>` signs are special characters that are used in [define html] to mark where [define html_tag tags] begin and end.
      
      [snippet html_tag_example highlight:0,1|3,1]

      You'll sometimes hear these characters referred to as _"angle brackets"_ by other developers.

- slide:
    content: |
      The word between the opening and closing tags is the name of the [define html_element Element]. Each [define html_element] has a different purpose in the web browser.
      
      [snippet html_tag_example highlight:1,2]

      For example, this `h1` Element is how you display a large heading.

- slide:
    content: |
      At the end of an [define html_element] is the closing [define html_tag tag]. It's written much like the opening tag, but there's also a `/` character after the first `<` sign.

      [snippet html_tag_example highlight:17,5]

      The closing [define html_tag] is very important because it marks where an [define html_element] stops.

- slide:
    content: |
      Everything between the opening and closing [define html_tag tags] is the content. This [define html_element Element] is a _heading_. If you were to look at this in a browser it would show up as the phrase "Hello, World!" in a large and bold font.

      [snippet html_tag_example highlight:4,13 preview:45%]

- slide:
    mode: popup
    content: |
      We've talked a lot about how [define html] works, so let's jump into writing some code and see what happens.

- slide:
    controller: highlightFileBrowser
    content: |
      On the left side of the screen is the [define file_browser]. This is a list of all files in your project.

- slide:
    controller: waitForIndexHtml
    content: |
      Open the file named `index.html` by [define double_click double clicking] on it in the [define file_browser].

- slide:
    controller: codeEditorIntro
    content: |
      The code file you just opened is now in the [define codelab_editor] area. This is where you can make changes to code.

      At the top, you'll see there's a new tab added for the file you just opened.

- slide:
    controller: previewAreaIntro
    content: |
      On the right side of the screen you can see the [define codelab_html_preview]. This shows what the [define html] for this file looks like when viewed in a [define web_browser browser].

      This area will update automatically as you make changes.

- slide:
    controller: highlightEditor
    content: |
      The left side of the screen is the [define code_editor]. This has many of the same features as modern code editors.

- slide:
    controller: highlightPreviewArea
    content: |
      The right side of the screen is the [define preview_area]. Students are able to see the results of the code as they work.

- slide:
    controller: addHeading
    content: |
      Let's have you try writing some HTML for yourself. Follow along with the instructions to add a heading to the page.

      [snippet base_example]

- slide:
    content: |
      Lessons will have multiple coding exercises that guide a student through writing code.

- slide:
    controller: addImage
    content: |
      Let's write some more HTML, but this time let's add an image to the page.

      This example is a little more complicated, but if you follow along with the instructions then you shouldn't have a problem!

      [snippet void_example]

- slide:
    content: |
      So far you've used [define html] to create a new heading and image. Maybe we need to use some [define css] to improve the visual appearance of the page!

- slide:
    content: |
      In later web development lessons we'll begin teaching students how to apply visual styles to their web pages using [define css].

- slide:
    controller: addStylesheet
    content: |
      Let's see what kind of difference a little bit of [define css] can make to a web page.

      Follow the instructions in include a [define css] [define css_stylesheet stylesheet].

      [snippet css_stylesheet]

- slide:
    title: About CodeLab
    mode: overlay
    content: |
      CodeLab works entirely from this website, so students can write code and share creations without having to install software on their own computers.

- slide:
    content: |
      CodeLab focuses on teaching languages that are actively used by professionals today, such as [define html], [define css], and [define javascript].

      CodeLab offers courses in both basic computer programming and web development.

- slide:
    emote: happy
    content: |
      Students have **access to their completed lessons from home** so they can continue to work on programming even when they aren't in class.

      Additionally, students can create their own projects and websites and then **share them with friends and family**! 

- slide:
    emote: happy
    content: |
      If you have any questions about CodeLab, or if you're interested in reserving a space, use either of the links below to get started!

      [silent] <a class="assistant-button" target="__ask_question" href="https://docs.google.com/forms/d/e/1FAIpQLSeYOBUeymVmQXG654BhiQF7_97_3Okn7vxrSNozqkXy23cZjg/viewform" >Ask a Question</a> <a class="assistant-button" href="/signup" target="__reserve_space" >Reserve a Space</a>

- slide:
    mode: popup
    content: |
      I hope you enjoyed trying out CodeLab! You're free to continue experimenting with these files to see what kind of neat things you can make!

      **Create! Learn! And have fun writing code!**

- slide:
    mode: overlay
    content: |
      Great work! There's still a lot to learn, but let's end this lesson by reviewing what we've covered so far.

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:0,4]

    hint: |
      The individual parts of an [define html_element] are called tags.

    explain: |
      Each time you create a new [define html_element] you must start with an opening tag.

    choices:
      - The opening tag
      - The leading byte
      - The execute command
      - The block maker

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:17,5]

    hint: |
      The individual parts of an [define html_element] are called tags.

    explain: |
      Each time you create a new [define html_element] you must use a closing tag to end it. You'll learn about more types in later lessons!

    choices:
      - The closing tag
      - The ending byte
      - The terminator command
      - The block breaker

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:4,13]

    explain: |
      The content is whatever has been added between the opening and closing [define html_tag tags] of an [define html_element]. It could be text, or even other [define html_element Elements].

    choices:
      - The content
      - The encoded matrix
      - The bytecode input
      - The binary block

- question:
    show: 4
    title: What is the name of a complete [define html] instruction? 
    content: |
      This includes the opening and closing tags as well as the content inside.

      [snippet html_tag_example highlight:0,22]

    explain: |
      Basic commands in [define html] are called [define html_element HTML Elements]. Websites use hundreds, or even thousands of them, to create the content in the [define web_browser]

    choices:
      - An HTML Element
      - An encoded terminator
      - A binary block
      - A bytecode command

- question:
    show: 4
    title: What is another name for the `<` and `>` signs in [define html]? 

    explain: |
      The `<` and `>` signs are special characters used by [define html] to identify where [define html_tag tags] begin and end.

    choices:
      - Angle brackets
      - Pointy blocks
      - Arrow bytecodes
      - Sharp codes

- slide:
    emote: happy
    content: |
      Great work! I hope you learned a lot about creating web pages!
