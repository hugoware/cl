- slide:
    mode: overlay
    title: Introduction to Functions
    content: |
      In this lesson we're going to start learning about a very important feature in programming called [define javascript_function s].

- slide:
    content: |
      Generally speaking, [define javascript_function s] are blocks of code that perform a task and can be used over and over.

      In fact, you've been using [define javascript_function s] in the past few lessons!

- slide:
    content: |
      Let's look at an example [define javascript_function] from one of the earlier lessons.

      [snippet alertMessage]

      This is the `alert` [define javascript_function].

- slide:
    content: |
      You probably remember that when this code is run, a message box appears on the screen and displays the phrase **"hello, world!"**.

      [snippet alertMessage]

      You aren't sure how the message box is being displayed, but you do know that you can control the message that's shown.

- slide:
    content: |
      This is actually one of the primary benefits of [define javascript_function s].

      [snippet alertMessage]

      With a [define javascript_function] you're able to run a complex block of code, control how it behaves by telling it instructions, and then reuse it over and over again without needing to know what's happening inside.

- slide:
    content: |
      So far you've only been using existing [define javascript_function s] in the code that you've written. In this lesson we're going to learn how to write our own!

      Let's take a look at what a [define javascript_function] looks like.

- slide:
    content: |
      There a several ways to create [define javascript_function s] in [define javascript], but this is a good style to start with.

      [snippet addFunction]

      If you ||read|reed|| through the code it's pretty easy to see that this [define javascript_function] will add two values together and then use `console.log` to display it on the screen.

- slide:
    content: |
      To define a [define javascript_function] you must start with the `function` [define javascript_keyword].

      [snippet addFunction highlight:0,8]

      This will inform [define javascript] that the following code will be a new [define javascript_function].


- slide:
    content: |
      After that is the **name** of the [define javascript_function]. This is the phrase you will use when you attempt to use the [define javascript_function] in your code.

      [snippet addFunction highlight:9,3]

      For example, this [define javascript_function] would be used by typing in the phrase `||add(5, 5)|add and then a pair of numbers||`.

- slide:
    content: |
      Next, you must use an `(`. This marks the beginning of where [define javascript_argument s] can be added.

      [snippet addFunction highlight:12,1]

- slide:
    content: |
      Between the parentheses are where you can define [define javascript_argument s] for your [define javascript_function].

      [snippet addFunction highlight:13,4]

      [define javascript_argument s] are extra instructions for a [define javascript_function] so it knows what to do. We'll discuss this in more detail later in the lesson.

- slide:
    content: |
      After the [define javascript_argument s], if any have been defined, is the `)`.

      [snippet addFunction highlight:17,1]

      This marks the end of the area for the [define javascript_function] [define javascript_argument s].

- slide:
    content: |
      Next, the [define javascript_function] needs an `{` and `}`. 

      [snippet addFunction highlight:19,1|62,1]

      These braces are placed around the code that you want to be run each time this [define javascript_function] is used.

- slide:
    content: |
      Now that we've covered the parts of a [define javascript_function], let's walk through each step of what happens with the code each time this [define javascript_function] is used.

      [snippet addFunction]

- slide:
    content: |
      In this example, there are two values that are _"passed into"_ the [define javascript_function]. This basically means that the values for `||a|ae||` and `b` are given to the [define javascript_function] by the code that's using it.

      [snippet addFunction highlight:13,1|16,1]

      [define javascript_argument s] like these behave almost identically to [define code_variable s].

- slide:
    content: |
      Once inside of the [define javascript_function] code block, the two values are added together and _"assigned"_ to the [define code_variable] named `total`.

      [snippet addFunction highlight:22,18]

      If `||a|ae||` were to be the number **10**, and `b` was the number **15**, then `total` would be the number **25**.

- slide:
    content: |
      Finally, the `total` value is displayed in the [define codelab_code_output] area using the `console.log` [define javascript_function].

      [snippet addFunction highlight:42,19]

- slide:
    content: |
      This now means we have a [define javascript_function] that can be used over and over again by simply changing the [define javascript_argument s] that are "passed in".

      [snippet usingAddFunction]

      Each time the `add` [define javascript_function] is used, the two numbers are added together and then displayed on the screen!

- slide:
    content: |
      This is a simple example, but you'll quickly find how useful this can be as you create more complex computer programs.

- slide:
    mode: popup
    content: |
      Let's start working on a simple example where a [define javascript_function] would be useful.

- slide:
    waitForFile: /main.js
    fileName: main.js

- slide:
    content: |
      Let's start by writing a fairly complex list of `if` statements that check for an animal name and then displays the sound they make.

- slide:
    controller: createIfStatements
    content: |
      Follow along with the example and create all of the required conditions.

- slide:
    controller: declareAnimalVar
    content: |
      Now declare a [define code_variable] for one of the animals so we can test that the conditions behave as expected.

- slide:
    content: |
      Now, at this point, if we had to check another animal sound we'd have to retype all of this code again.

- slide:
    content: |
      In fact, we would have to repeat this code every single time we needed to check an animal noise.

- slide:
    content: |
      In programming, repeating code is a bad idea. In fact, there's a rule in programming called the **DRY Principle** which means **"Don't Repeat Yourself"**.

      **If you can avoid repeating code, then it's a good thing to do!**

- slide:
    content: |
      Obviously, retyping code over and over very slow and time consuming and would be very difficult to manage!

      **This is precisely where [define javascript_function s] are most useful!**

- slide:
    controller: convertToFunction
    content: |
      Let's try to change the code you've written so far into a [define javascript_function].

      Follow along with the instructions to convert this series of `if` statements into a new [define javascript_function].

- slide:
    controller: addInvoke
    content: |
      Now, let's use the `checkAnimalSound` [define javascript_function] and then press **Run Code** to see the result!

- slide:
    content: |
      Now that we have a working [define javascript_function], let's start making it more useful.

- slide:
    content: |
      Each of the `if` statements in this [define javascript_function] are checking the `animal` variable and then using it to decide which messsages to display.

- slide:
    content: |
      At the moment, this code declares the `animal` [define code_variable] and sets it to **"%%selectedAnimal%%"**, which makes it impossible for it match any of the other conditions.

- slide:
    content: |
      This is a great example of something that should be an [define javascript_argument] for this [define javascript_function].

- slide:
    mode: overlay
    content: |
      [define javascript_argument s] make [define javascript] [define javascript_function s] much more useful because they allow you to provide extra instructions that it can use to perform the work.

- slide:
    content: |
      Let's look at the `add` function from earlier in the lesson.

      [snippet addFunction]

- slide:
    content: |
      Both `a` and `b` are [define javascript_argument s].

      [snippet addFunction]

      It doesn't matter what the values are since the purpose of the [define javascript_function] is to add _whatever_ two values are provided and add them together and then `log` them onto the screen.

- slide:
    content: |
      The values for `a` and `b` are "passed in", meaning they are provided when the [define javascript_function] is used.

      [snippet addFunction]


- slide:
    content: |
      Let's look at the `showAnimalSound` [define javascript_function] you're writing and see how [define javascript_argument s] flow.

      [image arg-cat.png]

      In this example, if you were to use ||`showAnimalSound('cat')`|the function show animal sound with the argument cat|| then the `animal` argument would be equal to the value **"cat"**.

- slide:
    content: |
      Changing the value between the parentheses when using the [define javascript_function] will change the value of `animal` inside of the [define javascript_function].

      [image arg-mouse.png]

      In this case, using **"mouse"** instead of **"cat"** would cause the `animal` [define javascript_argument] to be changed to **"mouse"** instead.

- slide:
    content: |
      In [define javascript], it's also possible to **not** tell the [define javascript_function] an [define javascript_argument].

      [image arg-undefined.png]

      In [define javascript], not providing an [define javascript_argument] will make the value of animal be assigned a special value called `undefined`.

- slide:
    content: |
      Finally, [define javascript_function] isn't strict about the types of values that are passed into functions. For example, it's entirely valid to use a number when using this [define javascript_function]!

      [image arg-number.png]

      We'll learn how to check the types of [define javascript_argument s] passed into [define javascript_function s] in later lessons.

- slide:
    mode: popup
    content: |
      Let's change this [define javascript_function] so that it uses an [define javascript_argument].

- slide:
    controller: removeInlineVar
    content: |
      First, we need to remove the `animal` variable that's being declared inside of the [define javascript_function].

      [snippet variableToRemove]

- slide:
    controller: invokeFunctionNoArg
    content: |
      Next, we need to use `animal` as an argument inside the [define javascript_function] definition.

- slide:
    controller: invokeFunctionWithDog
    content: |
      Let's update the ||`showAnimalSound`|show animal sound|| [define javascript_function] to use an [define javascript_argument].

- slide:
    content: |
      As mentioned earlier, one of the biggest advantages to using a [define javascript_function] is that you can avoid repeating code through your programs.

- slide:
    content: |
      If you didn't use a [define javascript_function], the series of `if` statements would be repeated over and over through the program each time you need to check an animal sound.

- slide:
    content: |
      This would be very difficult to maintain or even make changes to it.

      Fortunately, by using a [define javascript_function], you only need to update the code in one single place.

- slide:
    controller: changeDogSound
    content: |
      Try updating the ||`showAnimalSound`|show animal sound|| [define javascript_function] os that a  `dog` makes the sound `woof` instead of the current sound.

- slide:
    controller: invokeFunctionWithBird
    content: |
      Let's use the ||`showAnimalSound`|show animal sound|| [define javascript_function] again, but this time include an animal that doesn't exist yet.

- slide:
    controller: addBirdSound
    content: |
      Now, let's update the ||`showAnimalSound`|show animal sound|| to include another condition that tests if the [define code_variable] `animal` matches the [define javascript_string] **"bird"**.

- slide:
    content: |
      As you can see, [define javascript_function s] are a great way to create reusable code that's easy to update!

- slide:
    content: |
      You've learned a lot about [define javascript_function s] in this lesson, so let's take a break and review what we've covered.

- question:
    mode: overlay
    title: What is the **DRY** Principle?

    choices: 
      - Don't Repeat Yourself
      - Download Redirect Yields
      - Don't Reheat Yogurt
      - Direct Red to Yellow

    explain: |
      The **DRY Principle** means, "Don't repeat yourself". Basically, instead of repeating the same code over and over, you should try to change it into a reuseable [define javascript_function].

- question:
    title: Functions are a great way to avoid repeating code?

    choices:
      - 'True'
      - 'False'

    explain: |
      You should try your best to avoid repeating code when you write programs. [define javascript_function s] are a great way to create reusable blocks of code and simplify the programs you create.

- question:
    title: What is the highlighted block of code?

    content: |
      [snippet quizExample highlight:15,4]
      
    choices:
      - An argument
      - A code maker
      - A binary reader
      - An HTML Element

    explain: |
      The values between the parentheses in a [define javascript_function] declaration are the [define javascript_argument s]. You can define as you'd like, so long as you separate each one with a `,`.

- question: 
    title: what is the higlighted block of code?

    content: |
      [snippet quizExample highlight:9,5]

    choices:
      - The function name
      - An argument
      - A bytecode reversal
      - The file terminator

    explain: |
      After the `function` [define javascript_keyword] is the name of the [define javascript_function]. This is what you will type whenever you're using the [define javascript_function] in your code.

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!

# - slide:
#     content: 


# if is cat
# console.log('meow')
# 
# if is dog
# console.log('bark')
# 
# if is mouse
# console.log('squeek')
# 
# if is bird
# console.log('chirp')
# 
# if is snake
# console.log('hiss')
# 
# else
# console.log('not sure');

      







# - question:
#     count: 4   # optional question count
#     title: Main title
#     
#     hint: Optional helpful hint

#     explain: |
#       After the question is finished hint

#     choices:
#       - correct answer
#       - wrong answer 1
#       - wrong answer 2
#       - wrong answer 3

# - slide:
#     flags: +OPEN_FILE
#     emote: happy
#     controller: name
#     mode: popup
#     content: |
#       Way to go! You've finished this lesson!
#       
#       [snippet name highlight:0,5|20,5]
#       
#       [snippet html preview:50%]
#       
#       [image default.png]
#       
#       [image full.jpg frame]
#       
#       Inline replacement is done using ||does|duz||
#       
#       A normal [define html] is like this
#       
#       A lowercase [define html l] is like this
#       
#       A plural [define html p] is like this
#       A plural [define html s] or like this
#       
#       Can be combined as [define html lp] [define html ls]
#       
#       
