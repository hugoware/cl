- slide:
    mode: overlay
    title: Using Conditional Statements
    content: |
      In this lesson we're going to start learning how to use [define conditional_statement s] to create programs that execute differently depending on the input it receives.

- slide:
    content: |
      So far all of the programs we've written so far run from the start and then to the end every single time.

      Obviously, this won't be useful for very long. We need a way to control the order that the code is run.

- slide:
    content: |
      [define conditional_statement s] control how code in a computer program is executed.

      [snippet if_example_simple_1]

- slide:
    content: |
      You might remember from an earlier lesson that a series of [define javascript_literal sl], [define code_variable ls], and [define code_operator sl] is called an [define javascript_expression l]. 

      [snippet if_example_simple_1 highlight:4,9]

      In this example, the highlighted code is an [define javascript_expression l] that's inside of a [define conditional_statement l].


- slide:
    content: |
      [define javascript_expression s] are evaluated and converted into a single value. In this case, it's pretty easy to see that `500` is greater than `100`, so the evaluated [define javascript_expression l] would be `true`

      [snippet if_example_simple_2 highlight:4,9]

      However, it's very uncommon to have [define conditional_statement ls] written like this. Most of the time the [define conditional_statement s] that you write will also include [define code_variable ls];

- slide:
    content: |
      This example is far more common than the one before. In this case, there are three separate [define code_variable ls] being used.

      [snippet if_example]

- slide:
    content: |
      The [define code_variable l] `today` would be the current date, so it would change each time the day changed.

      [snippet if_example highlight:4,5]

- slide:
    content: |
      The [define code_variable l] `birthday` would be based on the user's date of birth, so it would be unique depending on who was using the program.

      [snippet if_example highlight:14,8]

- slide:
    content: |
      Finally, the `name` [define code_variable l] is also determined by the person who is using the program, so the output would show a different name depending on the user.

      [snippet if_example highlight:60,4]

- slide:
    content: |
      If the condition were to be true, meaning that `today` is the same as `birthday`, then the [define conditional_statement l] would display the greeting message.

      [snippet if_example highlight:4,18]

- slide:
    content: |
      If the condition were to be true, meaning that `today` is the same as `birthday`, then the [define conditional_statement l] would display the greeting message.

      [snippet if_example]

- slide:
    mode: popup
    content: |
      it's best to try this out and see how it works

- slide:
    waitForFile: /main.js
    fileName: main.js

- slide:
    controller: ifStatement
    content: |
      start by creating the if statement

      [snippet first_example size:small]

- slide:
    controller: ifStatementFlip
    content: |
      try to switch the variables so there's enough chairs and run it again

- slide:
    content: |
      this time there wasn't a message because there was enough

- slide:
    mode: overlay
    content: |
      we need to have a message when the condition is false

      can't just put it afterwards or it would run every time

- slide:
    content: |
      fortunately, it's pretty easy to do using the `else`

      [snippet else_example]
      
- slide:
    content: |
      when the conditions is true, the first block is run

      [snippet else_example]
      
- slide:
    content: |
      when the condition is false, the second block is run

      [snippet else_example]

- slide:
    mode: popup
    content: |
      let's try and edit the code to inclde the if statement

- slide:
    controller: ifElseStatement
    content: |
      follow instructions

- slide:
    controller: ifElseStatementFlip
    content: |
      like with before, try the inverse now
    
- slide:
    mode: overlay
    content: |
      theres another one you can use called if else

- slide:
    content: |
      allows you to do a condition after another condition

      [snippet else_if_example]

- slide:
    content: |
      useful for mulitple scenarios
    
- slide:
    content: |
      as before, the expression is evaluated

- slide:
    content: |
      then tested against the first block

- slide:
    content: |
      if that doesn't pass, the next expression is tested

- slide:
    content: |
      if it passes, that block is executed

- slide:
    mode: popup
    content: |
      lets try again with an `else if` statement

- slide:
    controller: ifElseIfStatementPrepare
    content: |
      follow along with the instructions

- slide:
    controller: ifElseIfStatement
    content: |
      change the value to exactly match the original value

- slide:
    mode: overlay
    content: |
      conditions match the contents of variables

- slide:
    content: |
      computer programs take input to make choices

- slide:
    content: |
      lets introduce another command called `console.ask` to get user input

- slide:
    mode: popup
    content: |
      let's revise the code to ask for user input instead of having the variables typed

- slide:
    controller: usingAsk
    content: |
      follow along with instructions

      totalStudents = console.ask('how many students?');
      totalBooks = console.ask('how many books?');

- slide:
    controller: runCode
    content: |
      press run code and test all 3 scenarios

      You will need to press run code more than once


- slide:
    content: |
      Wow! We got a lot done in this lesson! Let's take some time and review what we've learned!

- question:
    mode: overlay
    title: What statements are used for checking conditions in [define javascript]?

    choices:
      - '`if`, `else`, and `else if`'
      - '`when`, `otherwise`, and `except`'
      - '`sometimes`, `always`, and `never`'
      - '`before`, `after`, and `later`'

    explain: |
      if/else/elseif

- question:
    title: What is a "block" of code?

    choices:
      - Between curly braces
      - Code that will not have errors
      - Special numbers in JavaScript that 
      - Alt thing

    explain: |
      if/else/elseif

- question:
    title: What message would be printed at the end of this
    content: |
      [snippet question_1 size:small]

    choices:
      - The message `"first"` is printed in the output
      - The message `"second"` is printed in the output
      - Nothing, no messages will be displayed
      - Nothing, this code has errors and will not run

    explain: |
      if/else/elseif
        
- question:
    title: What message would be printed at the end of this
    content: |
      [snippet question_2 size:small]

    choices:
      - The message `"not match"` is printed in the output
      - The message `"is apple"` is printed in the output
      - The message `"is banana"` is printed in the output
      - The message `"is orange"` is printed in the output

    explain: |
      if/else/elseif

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!
        
      



      


# - question:
#     count: 4   # optional question count
#     title: Main title
#     
#     hint: Optional helpful hint

#     explain: |
#       After the question is finished hint

#     choices:
#       - correct answer
#       - wrong answer 1
#       - wrong answer 2
#       - wrong answer 3

# - slide:
#     flags: +OPEN_FILE
#     emote: happy
#     controller: name
#     mode: popup
#     content: |
#       Way to go! You've finished this lesson!
#       
#       [snippet name highlight:0,5|20,5]
#       
#       [snippet html preview:50%]
#       
#       [image default.png]
#       
#       [image full.jpg frame]
#       
#       Inline replacement is done using ||does|duz||
#       
#       A normal [define html] is like this
#       
#       A lowercase [define html l] is like this
#       
#       A plural [define html p] is like this
#       A plural [define html s] or like this
#       
#       Can be combined as [define html lp] [define html ls]
#       
#       
