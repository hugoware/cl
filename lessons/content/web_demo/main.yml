
-
  slide:
    mode: overlay
    title: Introduction to Creating Web Pages
    content: |
      Welcome to your first lesson on creating web pages!

      As you work through this lesson you will be asked to complete certain tasks before you can move onto the next step.

-
  slide:
    content: |
      In this tutorial we're going to start learning the basics of creating web pages.

      However, before we start learning how to write code, it's best to take a little bit of time and learn how web pages work _behind the scenes_.

-
  slide:
    controller: browserType

-
  slide:
    content: |
      Generally speaking, web pages viewed in the browser are created using three different core technologies. These are [define html], [define css], and [define javascript].

      [image tech.png]

      In fact, it's entirely possible that every single website you've ever visited has used all three of these technologies at the same time!

-
  slide:
    content: |
      [define html] is the foundation for all [define web_page web pages]. [define html] is a language that determines the words and content that are displayed in the web browser.

      [image html-focus.png]

      In a sense, [define html] is what your web page _says_.

-
  slide:
    content: |
      [define css] is a language that's used to determine the visual appearance of a web page. The colors, font sizes, layout, and other design properties of your web page are defined by the rules in [define css]

      [image css-focus.png]

      Simply put, [define css] decides what your web page _looks like_.

-
  slide:
    content: |
      Finally, [define javascript] is a programming language that can be used to create logic and behaviors on a web page. Many modern websites use [define javascript] to create complicated applications that run entirely in the [define web_browser browser]

      [image javascript-focus.png]

      Generally speaking, [define javascript] decides what your web page _will do_.

-
  slide:
    content: |
      Each time you visit a [define website website], code files like [define html], [define css], and [define javascript] are sent to your computer. The [define web_browser] uses the instructions in each of these files to create the [define web_page web page] you see on the screen.

      [image build.jpg frame]

# -
#   slide:
#     content: |
#       There's a lot to learn when it comes to creating web pages, but with practice and time, you'll be building entire websites before you know it.
      
#       [image html-focus.png]

#       At the start of this tutorial series, we're going to focus on learning [define html] and then introduce [define css] and [define javascript] at a later time.

- slide:
    # emotion: happy
    content: |
      Before you start writing code, let's spend a little more time on understanding how [define html] works!

- slide:
    title: What is HTML?
    content: |
      [define html] is a language that's used to describe the information found on a web page. It's written using instructions called [define html_element Elements]. An [define html_element] is made up of several parts called [define html_tag tags].

      Below is an example of a simple [define html_element].

      [snippet html_tag_example]

      Let's go over what each part of this code example ||does|duz||. 

- slide:
    content: |
      The first part of an [define html_element] is the **Opening** [define html_tag tag]. It's written using a `<` sign, followed by the name of the tag, and then a `>` sign.
      
      [snippet html_tag_example highlight:0,4]

      This tells the [define web_browser] what rules to follow for everything that comes after the opening tag.

- slide:
    content: |
      The `<` and `>` signs are special characters that are used in [define html] to mark where [define html_tag tags] begin and end.
      
      [snippet html_tag_example highlight:0,1|3,1]

      You'll sometimes hear these characters referred to as _"angle brackets"_ by other developers.

- slide:
    content: |
      The word between the opening and closing tags is the name of the [define html_element Element]. Each [define html_element] has a different purpose in the web browser.
      
      [snippet html_tag_example highlight:1,2]

      For example, this `h1` Element is how you display a large heading.

- slide:
    content: |
      At the end of an [define html_element] is the closing [define html_tag tag]. It's written much like the opening tag, but there's also a `/` character after the first `<` sign.

      [snippet html_tag_example highlight:17,5]

      The closing [define html_tag] is very important because it marks where an [define html_element] stops.

- slide:
    content: |
      Everything between the opening and closing [define html_tag tags] is the content. This [define html_element Element] is a _heading_. If you were to look at this in a browser it would show up as the phrase "Hello, World!" in a large and bold font.

      [snippet html_tag_example highlight:4,13 preview:45%]

- slide:
    mode: popup
    content: |
      We've talked a lot about how [define html] works, so let's jump into writing some code and see what happens.


- slide:
    controller: highlightFileBrowser
    content: |
      Files for a project are found in the [define file_browser] located on the left side of the screen.

- slide:
    waitForFile: /index.html
    content: |
      Open the file named `index.html` by [define double_click double clicking] on the file in the [define file_browser].

- slide:
    controller: highlightEditor
    content: |
      The left side of the screen is the [define code_editor]. This is the area of the screen where you can make changes to files.

- slide:
    controller: highlightPreviewArea
    content: |
      The right side of the screen is the [define preview_area]. You'll be able to see the results of the code as you make changes!

- slide:
    controller: addHeading
    content: |
      Let's have you try writing some [define html] for yourself. Follow along with the instructions to add a heading to the page.

      [snippet base_example]

- slide:
    controller: addParagraph
    content: |
      Let's try a different type of [define html_element]. Follow along with the instructions to add a paragraph to the page.

      [snippet paragraph_example]

- slide:
    controller: addImage
    content: |
      Now that you're starting to understand how [define html] works, let's try something that's a little more complicated.

      Follow along with the instructions to add an image to this page!

      [snippet void_example]

- slide:
    content: |
      So far you've used [define html] to add new content and an image. Now is a great time to use [define css] to improve the visual appearance of the page!

- slide:
    emote: happy
    content: |
      In later lessons you'll begin learning how to write [define css] to apply visual styles to your web pages.

      For now, let's see what kind of difference a little bit of [define css] can make!

- slide:
    controller: addStylesheet
    content: |
      Follow the instructions in include a [define css] [define css_stylesheet stylesheet].

      [snippet css_stylesheet]

- slide:
    content: |
      This web page is starting to look a lot more interesting, but it would be great if we could change the background color that's being used.

      Let's open the `style.css` file and try making some changes!


- slide:
    waitForFile: /style.css
    content: |
      Open the `style.css` file so we can take a look at what's inside!

- slide:
    controller: firstBackgroundChange
    content: |
      Let's change the background color to something different. Try using one of the following colors!

      [silent] `red`, `blue`, `purple`, `magenta`, `orange`

- slide:
    mode: overlay
    content: |
      Great work! There's still a lot to learn, but let's end this lesson by reviewing what we've covered so far.

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:0,4]

    hint: |
      The individual parts of an [define html_element] are called tags.

    explain: |
      Each time you create a new [define html_element] you must start with an opening tag.

    choices:
      - The opening tag
      - The leading byte
      - The execute command
      - The block maker

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:17,5]

    hint: |
      The individual parts of an [define html_element] are called tags.

    explain: |
      Each time you create a new [define html_element] you must use a closing tag to end it. You'll learn about more types in later lessons!

    choices:
      - The closing tag
      - The ending byte
      - The terminator command
      - The block breaker

- question:
    show: 4
    title: What is the name of the `highlighted` code?
    content: |
      [snippet html_tag_example highlight:4,13]

    explain: |
      The content is whatever has been added between the opening and closing [define html_tag tags] of an [define html_element]. It could be text, or even other [define html_element Elements].

    choices:
      - The content
      - The encoded matrix
      - The bytecode input
      - The binary block

- question:
    show: 4
    title: What is the name of a complete [define html] instruction? 
    content: |
      This includes the opening and closing tags as well as the content inside.

      [snippet html_tag_example highlight:0,22]

    explain: |
      Basic commands in [define html] are called [define html_element HTML Elements]. Websites use hundreds, or even thousands of them, to create the content in the [define web_browser]

    choices:
      - An HTML Element
      - An encoded terminator
      - A binary block
      - A bytecode command

- question:
    show: 4
    title: What is another name for the `<` and `>` signs in [define html]? 

    explain: |
      The `<` and `>` signs are special characters used by [define html] to identify where [define html_tag tags] begin and end.

    choices:
      - Angle brackets
      - Pointy blocks
      - Arrow bytecodes
      - Sharp codes

- slide:
    mode: popup
    content: |
      Way to go! You've finished this lesson!

- slide:
    mode: popup
    content: |
      I hope you enjoyed trying out CodeLab! You're free to continue experimenting with these files to see what kind of neat things you can make!

      **Create! Learn! And have fun writing code!**
