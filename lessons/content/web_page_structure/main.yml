- slide:
    mode: overlay
    title: Understanding Page Structure
    content: |
      In this lesson we're going to talk about the proper way to create a new [define web_page l]. We will be learning about specific [define html_element s] that are used as the foundation for a typical [define web_page l].

- slide:
    content: |
      So far we've used [define html] to create headings and paragraphs by adding [define html_element s] to a page.

      Even though we could see what we typed in the [define codelab_html_preview], the code was not written properly according to [define html] rules.

- slide:
    content: |
      For the most part, [define web_browser s] are very forgiving when displaying [define html]. Most [define web_browser s] will attempt to show a result for the [define html] even if there are errors in the code.

      However, as smart as [define web_browser s] might be, it's always a good idea to write your code in a way that it makes it easier for the browser to understand the intent of your [define web_page l].

- slide:
    content: |
      In this lesson, we will be creating a default web page structure so we can understand the purpose of each [define html_element].

      If you don't remember everything, don't worry. Most modern [define code_editor s] will automatically create the required [define html] page structure when you create a new file.

- slide:
    clearTitle: true
    content: |
      This is an example of a basic [define html] page. There are additional [define html_element Elements] here you haven't seen before.

      [snippet base_empty]

- slide:
    content: |
      The `doctype` [define html_element Element] is used to decide the version of [define html] being used. In modern web development, this is normally set to `html`.

      [snippet base_empty highlight:0,15]

- slide:
    content: |
      The `head` [define html_element Element] acts as a container for other [define html_element s]. For the most part, [define html_element Elements] inside of the `head` [define html_element Element] are used to update page information that's not visible to the user.

      [snippet base_empty highlight:23,17,line]

- slide:
    content: |
      By contrast, the `body` [define html_element Element] is where most [define html_element s] that are displayed to the user are added.

      For example, the [define html_element s] you have already learned about, such as headings, paragraphs, and images, should be added to the `body` [define html_element Element].

      [snippet base_empty highlight:41,17,line]

- slide:
    content: |
      The `html` [define html_element Element] is used to tell the web browser that the contents of this file are an [define html] document. Both the `head` and `body` [define html_element Elements] should always be placed within the `html` [define html_element Element].

      [snippet base_empty highlight:16,50,line]


- slide:
    content: |
      Let's look at an example of an [define html] document that has some content.

      [snippet base_empty]

- slide:
    content: |
      The `head` [define html_element Element] contains several [define html_element s] that are not visible to the user. This includes information like the page title, author name, and links to external resources.

      [snippet base highlight:24,134,line size:small]

- slide:
    content: |
      The `body` [define html_element Element] contains the [define html] that's displayed to the user. If you were to look at this page in a web browser, you'd see the heading and image file displayed, but not anything from inside the `head` [define html_element Element]
      
      [snippet base highlight:160,58,line size:small]

- slide:
    mode: popup
    content: |
      Now that we've covered the basic structure of an [define html] page, let's try to write one for ourselves.

- slide:
    waitForFile: /index.html
    content: |
      Open the file named `index.html` in the [define file_browser]

- slide:
    content: |
      Since we're going to be creating an entire page structure from scratch, this file is completely blank.

- slide:
    content: |
      The first [define html_element Element] that should appear in an [define html] document is the `doctype`. The `doctype` is used to identify the version of HTML being used.

      For modern web development, this is fairly simple as there's only one type you need to use.

- slide:
    controller: addDoctype
    content: |
      Follow along with the instructions to add the correct `doctype` to the page.

- slide:
    content: |
      The next [define html_element] that we need to create is the `html` [define html_element Element]. This is used to wrap the entire [define html] document.

      Basically, any [define html_element s] between the opening and closing `html` tag are considered to be part of the document.

- slide:
    controller: addHtml
    content: |
      Follow along with the instructions to add the opening and closing `html` tags.

- slide:
    content: |
      The next [define html_element] we are going to add is the `head` Element.

      The `head` [define html_element Element] has quite a few varied purposes.

- slide:
    content: |
      For one, it is used to hold information about the page that is not visually displayed. This include data like descriptions, author names, copyright dates, supported languages and more. 

      This information is read by search engines to identify what is on your page.
      
- slide:
    content: |
      The `head` Element is also where you define the page title. The page title is the text that appears on the tab in the browser.

- slide:
    content: |
      Finally, the `head` is used to include external resources, for example [define css] styles. We haven't talked about [define css] just yet but will cover it and a few lessons from now.

- slide:
    controller: addHead
    content: |
      Follow along with the instructions to add the `head` Element and some information about this page.

- slide:
    content: |
      Finally, the `body` Element is used to wrap all visual content for a page. This includes text, images, videos, forms, and more.

      Essentially, if it should be visible to the visitor of the page, it probably should be in the `body` Element.

- slide:
    controller: addBody
    content: |
      Follow along with the instructions to add the `body` Element to your page.

- slide:
    controller: showCurrentTitle
    content: |
      Let's start by adding a title to this page. The `title` [define html_element Element] will change the name of the page as it appears in a browser tab.

      You can see in the [define preview_area] that the current title is _"Untitled Page"_

- slide:
    controller: addTitle
    content: |
      Use the `title` [define html_element Element] to add a title to your page.

      Don't forget that the `title` [define html_element Element] should be placed inside of the `head` [define html_element Element].

- slide:
    content: |
      You probably noticed that even though you added an [define html_element Element] to the page it did not show up in the [define preview_area]. Instead, the title of the page was changed.

      The `title` is a special [define html_element] that is not displayed visually as content.

- slide:
    content: |
      Now that there's a title for this page why not try adding some content.

- slide:
    controller: addContent
    content: |
      Add a `h1` and `p` [define html_element Element] to this page.

      Don't forget that content like the `h1` and `p` [define html_element Elements] should be placed inside of the `body` [define html_element Element].

- slide:
    content: |
      Let's add some more [define html_element s] to the `head` [define html_element Element] on the page.

- slide:
    content: |
      A `meta` [define html_element Element] is sometimes used by [define search_engine s] to collect extra information about your page. There are many `meta` [define html_element Elements] that you can use to describe the content of your page.

- slide:
    start: true
    controller: addMeta
    content: |
      Let's add a `meta` [define html_element Element] that describes the author of the page. Follow along with that example to create a new `meta` [define html_element Element].

- slide:
    content: |
      There are other purposes for `meta` [define html_element Elements], but we will cover those in later lessons.

- slide:
    content: |
      The `head` [define html_element Element] also acts as a container for external resources. One of the most common examples of an external resource is a [define css] [define css_stylesheet].

- slide:
    content: |
      Similar to using the `img` element, a [define css] [define css_stylesheet] is a file that must be included in a web page using a special [define html_element].

- slide:
    content: |
      We haven't learned much about [define css] just yet, but to summarize [define css] is a list of rules used to change things like colors, fonts, layout, and more. 

      When a [define css] [define css_stylesheet] is linked to a web page the rules in the file are used to change what the page looks like.

- slide:
    content: |
      This project already has a premade [define css] [define css_stylesheet] called `style.css`. The rules in the file will change the background color of the page, as well as the font type and font color.

- slide:
    controller: addLink
    content: |
      Follow the instructions to add a `link` [define html_element Element] to the `/style.css` file.

      Don't forget that this [define html_element Element] should be placed inside of the `head` [define html_element Element].

- slide:
    emote: happy
    content: |
      Great work! By using a `doctype`, and the `html`, `head`, and `body` [define html_element Elements], we've now created a correctly structured web page!

      Following best practices and writing good code is a great way become a better developer.

- question:
    mode: overlay
    title: What is the purpose of the `doctype` Element?

    explain: |
      The `doctype` is used to identify which version of [define html] your page is using. However, in modern web development this is typically going to be set to simply `"html"`.

    choices:
      - Identifies the version of HTML the page is using
      - Enables spellcheck for the page content
      - Disables images and video files
      - Changes the background color of the web page

- question:
    title: What is NOT a purpose of the `head` Element?

    explain: |
      The head element has many purposes, such as holding meta-information, the page title, and references for external resources.

    choices:
      - Showing a photo of the current web page visitor
      - Container for meta-information like description and author
      - Holds the `title` Element for the page
      - Container for references to external resources

- question:
    title: What should go inside of the `body` Element?

    explain: |
      Generally speaking, the `body` Element contains the content that should be seen by the webpage visitor such as text, images, videos, and more.

    choices:
      - Content that should be seen by the visitor
      - The `title` Element for the page
      - The `doctype` Element for the page
      - Meta-information like a page description or author name

- slide:
    mode: popup
    emote: happy
    content: |
      We will be learning more about [define css] in later lessons, but for now you're free to open the `style.css` file and make changes to it.

      If you do, make sure to try changing color names and sizes to see what happens!

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!
