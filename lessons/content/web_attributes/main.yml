- slide:
    mode: overlay
    title: Using HTML Elements
    content: |
      In this lesson we're going to look at how to use [define html_attribute s].

      [define html_attribute s] are a way to provide additional information about the behavior of an [define html_element].

- slide:
    content: |
      To help explain the concept of an [define html_attribute], let's walk through a simple scenario. 

      Let's say we wanted to add an image to a web page. The correct [define html_element] to use in this case is the `img` Element.

      [snippet img_no_attr]

- slide:
    content: |
      However, what's interesting about the `img` [define html_element Element] is that it's a [define void_element], meaning it can't have any content.

      All of the [define html_element s] you have written so far have only allowed you to use text. In this case, we want to display an image file.

      [snippet img_no_attr]

- slide:
    content: |
      This is where you can use an [define html_attribute] to provide additional information so the `img` [define html_element Element] knows what to do.

      [snippet img_with_attr]

      Let's walk through each of the parts that make up an [define html_attribute].

- slide:
    content: |
      To start, an [define html_attribute] needs a **name**. This name will change depending on the purpose, much like the name of an [define html_element] changes its behavior in the [define web_browser].

      [snippet img_with_attr highlight:5,3]

      In this case, the `img` [define html_element Element] uses the `src` [define html_attribute Attribute] to tell the [define web_browser] where to find the image file to display.


- slide:
    content: |
      The next character that is shown is an `||=|equal sign||`.

      [snippet img_with_attr highlight:8,1]

      A good way to remember this is that the name is equal to the value, which comes at the end of the [define html_attribute].

- slide:
    content: |
      The value of the [define html_attribute] is placed between two _double quotes_, one at the beginning of the value and the other at the end. 

      [snippet img_with_attr highlight:9,1|18,1]

      You're also allowed to use _single quotes_, however most developers only use _double quotes_ when writing [define html].

- slide:
    content: |
      Everything between the two _double quotes_ is the value. In this case, the value tells the `img` [define html_element Element] the location of the image file to display.

      [snippet img_with_attr highlight:10,8]

      The _"value"_ in this example is called a [define url]. We haven't discussed what a [define url] is just yet, but we'll cover them in later lessons.

- slide:
    mode: popup
    content: |
      Trying something out on our own is a much better way to understand a new concept. Let's give this a try so you can see it in action.

- slide:
    controller: waitForIndex
    content: |
      Open the `index.html` file in the [define file_browser]

- slide:
    controller: srcExample
    content: |
      Follow along with the instructions to add an image to this page. Use the `src` [define html_attribute Attribute] to tell the `img` [define html_element Element] where to find the image file to display.

- slide:
    content: |
      When the web page was read by the [define web_browser] it found the `img` [define html_element Element] and ||read|red|| the `src` [define html_attribute Attribute]. This gave the [define web_browser] the location of the file to display on the page.

- slide:
    controller: multipleImages
    content: |
      Let's try that again! Choose two more images that you'd like to add to the page. Use `img` [define html_element Elements] and the `src` [define html_attribute Attribute] like you did in the previous example.

- slide:
    content: |
      You can see that an [define html_attribute] allows us to provide additional instructions for [define html_element Elements] to change its behavior.

- slide:
    mode: overlay
    content: |
      HTML elements are not limited to just one single attribute. You're actually able to use many HTML attributes at a time.

- slide:
    content: |
      You can see in the example below, it's possible to add more than one [define html_attribute] to an [define html_element Element] so long as there's a space placed between each one.

      [snippet multiple_attrs]

- slide:
    content: |
      In fact, it's not at all uncommon to have an [define html_element] that has multiple [define html_attribute Attributes].

      [snippet multiple_attrs]

- slide:
    mode: popup
    content: |
      Let's try adding more [define html_attribute Attributes] to the images that you just added to the page.

- slide:
    controller: multipleAttributes
    content: |
      Try adding a `width` and `height` [define html_attribute Attribute] to each of the images on the page.

      Use the code example below as a reference if you are unsure on what to type.

      [snippet width_height]

- slide:
    mode: overlay
    content: |
      Let's look at one more type of [define html_attribute Attribute] you will see from time to time.

- slide:
    content: |
      This is called a [define boolean_attribute]. Unlike the previous examples this [define html_attribute] does not have a value that's explicitly set.
      
      [snippet boolean_attribute_simple]

- slide:
    content: |
      For a [define boolean_attribute], simply having it added to an [define html_element Element] is enough for it to be treated as if it were _true_.
      
      [snippet boolean_attribute_simple]

      In this example, the `button` [define html_element Element] is being set to a _"disabled"_ state, meaning it can't be pressed.


- slide:
    content: |
      From time to time you may see an [define html_attribute] that has a *value* that's the same as its *name*. In many cases, this is another example of a [define boolean_attribute].

      [snippet boolean_attribute_expanded]

      While it's generally not required, sometimes developers will choose to write [define boolean_attribute s] like this.

- slide:
    mode: popup
    content: |
      Let's give this a try using the `input` [define html_element Element].

- slide:
    controller: inputEntry
    content: |
      Start by adding an input element to the page.

      [snippet input_element_basic]      

- slide:
    content: |
      The `input` [define html_element Element] has many [define html_attribute Attributes] that can dramatically change its behavior. By default though, an `input` [define html_element Element] will display as a simple text field.

- slide:
    controller: previewInput
    content: |
      Click on the `input` [define html_element Element] in the [define preview_area] and then type in some letters.

      You should be able to make changes to the text field without any issue.

- slide:
    content: |
      Now let's use an [define html_attribute] to prevent a user from making changes to this `input` [define html_element Element].

- slide:
    controller: inputReadOnly
    content: |
      Follow along with the instructions to include a `readonly` [define html_attribute Attribute]. If you pay close attention you'll notice when the `input` [define html_element Element] becomes disabled.

- slide:
    controller: previewBlocked
    content: |
      Now the `input` [define html_element Element] is disabled and won't allow users to make changes.

      Click on the `input` [define html_element Element] in the [define preview_area] and try to enter something into the text field.

- slide:
    content: |
      Great work! Let's review what we've learned in this lesson.

- question:
    mode: overlay
    title: What is the name of the `highlighted` section of code?

    content: |
      [snippet anchor_example highlight:5,14]

    explain: |
      An [define html_attribute] is an additional instruction that can be added to an [define html_element] to change its behavior. An [define html_attribute] is placed within and [define html_element Elements] opening tag.

    choices:
      - HTML Attribute
      - HTML Navigator
      - Void Element
      - Natural Delimiter

- question:
    title: What is the preferred type of quote to use with [define html_attribute]?

    explain: |
      In HTML you can use both _single quotes_ and _double quotes_ for [define html_attribute], but double quotes are preferred.

    choices:
      - Double quotes `"`
      - Single quotes `'`

- question:
    title: What is the highlighted part of this [define html_attribute]?

    content: |
      [snippet anchor_example highlight:5,3]

    explain: |
      An [define html_attribute] always starts with its name. The **name** decides the behavior of the [define html_attribute].

    choices:
      - Name
      - Terminator
      - Encoder
      - Byte

- question:
    title: What is the highlighted part of this [define html_attribute]?

    content: |
      [snippet anchor_example highlight:10,8]

    explain: |
      The characters between the _double quotes_ are the value of the [define html_attribute]. The **value** of an [define html_attribute] can greatly change the behavior of an [define html_element].

    choices:
      - Value
      - Proxy
      - Extender
      - Namespace


- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!





# - question:
#     count: 4   # optional question count
#     title: Main title
#     
#     hint: Optional helpful hint

#     explain: |
#       After the question is finished hint

#     choices:
#       - correct answer
#       - wrong answer 1
#       - wrong answer 2
#       - wrong answer 3

# - slide:
#     flags: +OPEN_FILE
#     emote: happy
#     controller: name
#     mode: popup
#     content: |
#       Way to go! You've finished this lesson!
#       
#       [snippet name highlight:0,5|20,5]
#       
#       [snippet html preview:50%]
#       
#       [image default.png]
#       
#       [image full.jpg frame]
#       
#       Inline replacement is done using ||does|duz||
#       
#       A normal [define html] is like this
#       
#       A lowercase [define html l] is like this
#       
#       A plural [define html p] is like this
#       A plural [define html s] or like this
#       
#       Can be combined as [define html lp] [define html ls]
#       
#       
