- slide:
    mode: overlay
    title: Introduction to CSS
    content: |
      Welcome to your first lesson about how to use [define css].

      [define css] is very different than the [define html] you have been learning so far.

- slide:
    content: |
      [define css] stands for Cascading Style Sheets and is used to apply visual styles to an [define html] page.

      In a sense, [define html] decides what a web page says, whereas [define css] decides what a web page looks like.

- slide:
    content: |
      Before [define css] was introduced styles, such as fonts and colors, were applied to a page using even more [define html_element s].

      [snippet old_way]

      This might seem like a straightforward approach, however it quickly became very difficult for developers to manage.
      
- slide:
    content: |
      For example, if you wanted to change the color you would simply update the [define html] attribute.

      [snippet old_way highlight:15,11]

      This might not seem like a lot for a single [define html_element], but if you had a website that had hundreds of instances of the same color you'd have to find and update each one.

- slide:
    content: |
      Additionally, if you were to make a mistake, you could potentially cause the page to display incorrectly.

      [snippet old_way_error highlight:26,1]

      Needless to say, the old way was very time-consuming and prone to errors.

- slide:
    content: |
      Fortunately, [define css] was created to eliminate this problem!

- slide:
    content: |
      One of the primary benefits of [define css] is that it is _"[define decoupled l]"_ from [define html], meaning [define css] code is a separate file from [define html] code.

- slide:
    content: |
      You may remember from an earlier lesson that we used the `link` [define html_element Element] to attach a file named `style.css` to a web page. That file was an example of a [define css_stylesheet].

      After the [define css_stylesheet] was linked the appearance of the web page changed dramatically!

- slide:
    content: |
      The only change made to the [define html] page was to create a `link` [define html_element Element] that pointed to the separate [define css] file.
      
      This updated the visual style of an entire web page without modifying anything else in the [define html] file.

- slide:
    content: |
      [define css] becomes increasingly useful when you have many web pages that should all have a similar style.

      Not only can you reuse the same [define css] file across many pages, any changes you make to that [define css] file are automatically applied to any [define html] pages that have it included using the `link` [define html_element Element].

- slide:
    content: |
      Let's take a look at a simple example of [define css] code.

      [snippet basic_example]

- slide:
    content: |
      You probably recognize some of the words used here. `h1` is an [define html_element] that you have used in previous pages. The phrase `color` and `red` implies that this will change the color of the [define html_element] to **red**.

      [snippet basic_example highlight:0,2|6,5|13,3]

      Generally speaking, [define css] is as simple as that. The first part of the rule selects what [define html_element] should be changed, and then the following code decides what is done.

- slide:
    content: |
      Now that you have a general idea of how [define css] works, let's walk through each of the parts of this [define css] example.

      [snippet basic_example]

- slide:
    content: |
      A [define css] [define css_stylesheet] is made up of many individual style rules called [define css_declaration_block s]. You will normally find many of these indvidual blocks in a single [define css_stylesheet]

      [snippet basic_example highlight:0,19,line]

- slide:
    content: |
      The first part of a [define css_declaration_block l] is the [define css_selector]. You'll notice that this is the same name as an [define html_element] that you have used in earlier lessons.

      [snippet basic_example highlight:0,2]

- slide:
    content: |
      A [define css_selector] is responsible for _"selecting"_ the [define html_element Element] that should have the visual style applied to it.

      [snippet basic_example highlight:0,2]

      In this example, the [define web_browser] would _"select"_ any `h1` [define html_element Elements] it found on the page and then apply the style to it.

      
- slide:
    content: |
      After the [define css_selector] is a `{`. This starts the [define css] [define css_declaration_block].

      [snippet basic_example highlight:3,1|18,1]

      Everything that's between the starting and ending curly braces are visual styles that will be applied to the [define html_element Element] that the [define css_selector] matched.

- slide:
    content: |
      Each visual style inside of a [define css] [define css_declaration_block l] is called a [define css_declaration l].

      [snippet basic_example highlight:6,11]

- slide:
    content: |
      The first part of a [define css_declaration l] is the [define css_property l]. This identifies what should be changed on the [define html_element Element], such as colors, font types, and more.
      
      [snippet basic_example highlight:6,5]

      In this example, the [define css_property l] is `color`, meaning that the text color of the selected `h1` [define html_element Elements] will be changed.

- slide:
    content: |
      After each [define css_property l] you must use a `:` before writing the next part of the [define css_declaration l].

      [snippet basic_example highlight:11,1]

- slide:
    content: |
      Next, the following [define css_value l] will be applied to the [define css_property l] of the selected [define html_element Elements].
      
      [snippet basic_example highlight:13,3]

      In this example, all selected `h1` [define html_element Elements] would have their text color changed to the color _"red"_.


- slide:
    content: |
      Finally, you must end each [define css_declaration l] with a `;`. [define css] allows for [define css_declaration l] [define css_value ls] to go across multiple lines.
      
      [snippet basic_example highlight:16,1]

      Without the `;`, the [define css] [define css_declaration l] would not know where to end.

- slide:
    content: |
      After you have finished writing all of the [define css_declaration ls] you plan to use it's important to use a `}` to end the [define css_declaration_block l].
      
      [snippet basic_example highlight:18,1]

      Forgetting a `}` will most likely cause a [define css] [define css_stylesheet] to have errors and not display correctly.

- slide:
  content: |
    Typically you'll find that [define css_declaration_block ls] have many individual [define css_declaration s] to apply styles to a variety of different things about an [define html_element].

- slide:
    content: |
      Here's an example of a somewhat more realistic [define css] file.

      [snippet multiple_props]

      You'll notice each [define css_selector] has multiple [define css_declaration ls] that change the visual style of a variety of properties for each _"selected"_ [define html_element]

- slide:
    content: |
      There's a lot to learn when it comes to using [define css].

      In later lessons we'll learn more about different types of [define css_selector s] you can use. We will also discuss good practices for organizing your [define css] files.

- slide:
    mode: popup
    emote: happy
    content: |
      As usual, the best way to learn something new is to try it out for yourself!

- slide:
    waitForFile: /index.html
    content: |
      Let's get started!

      Open the file named `index.html` by [define double_click double-clicking] on it!

- slide:
    content: |
      You can see in the [define preview_area] that we have a basic web page that has no styles applied to it. The background is white and the font is a standard serif style black font.

- slide:
    controller: linkIndex
    content: |
      Let's include the `||/style.css|style.css||` file by using a `link` [define html_element Element].

      _If you're having a hard time remembering how to add a `link` [define html_element Element] then use the *"Show Hints"* button for help._

- slide:
    waitForFile: /style.css
    content: |
      Open the `style.css` file so we can take a look at what's inside!

- slide:
    content: |
      This [define css] file only has one [define css_declaration l] in it. The [define css_selector] locates the `body` [define html_element Element] on the page and then applies a background color of _orange_.

      In this case, the `body` [define html_element Element] represents the entire page.

- slide:
    controller: firstBackgroundChange
    content: |
      Let's start by trying to change the background color to something else. There are many different color names that you can use with [define css], but for this example let's limit it to just a few choices.

      Change the background color to one of the following colors.

      [silent] `red`, `green`, `purple`, `magenta`, `gray`

- slide:
    content: |
      Now try writing an entire [define css] [define css_declaration l], however this time we're going to use `h1` as the [define css_selector].

      Doing this will change the font color for all `h1` [define html_element Elements] on the page.

- slide:
    controller: addH1Rule
    content: |
      Write a [define css_declaration_block] that selects all `h1` [define html_element Elements] and sets the `color` [define css_property l] to any of the following colors.

      [silent] `white`, `yellow`, `pink`, `aqua`, `silver`

- slide:
    content: |
      Let's try that again, but this time we're going to change the `color` [define css_property l] for the `p` [define html_element Elements] on the page.

      This time code hints will be turned off, but if you get stuck, use the *"Show Hints"* button for help.


- slide:
    controller: addPRule

- slide:
    emote: happy
    content: |
      Looks good! While there's still plenty to do this website is starting to have some personality!

- slide:
    waitForFile: /about.html
    content: |
      Let's take a look at the other [define html] page in this project.

      Open the file named `about.html` by [define double_click double clicking] on it.

- slide:
    emote: sad
    content: |
      Hmm, it seems like this page does not have any of the same visual styles as `index.html`!

- slide:
    content: |
      As mentioned before, one of the advantages to using [define css] is that many [define html] pages can share the same [define css_stylesheet l].
      
      Fortunately, since all of the styles are in a single file it will be easy to use the `link` [define html_element Element] to add them to this page.

- slide:
    controller: linkAbout
    content: |
      Create a `link` [define html_element Element] that attaches the `style.css` file.

      Code hints will be turned off for this exercise, but if you get stuck then you can always use the *Show Hints* button to turn them back on.

- slide:
    content: |
      At this point, both HTML pages use the same stylesheet. This means that if you make a change to the stylesheet, both pages will show the change.

- slide:
    waitForTab: /style.css
    content: |
      Let's make a change to the stylesheet so we can see this in action.

      Switch to `style.css` by clicking on the [define codelab_tab tab] and the [define codelab_editor].

- slide:
    controller: secondBackgroundChange
    content: |
      Change the background color for the `body` [define html_element Element] to one of the following colors.

      [silent] `red`, `green`, `purple`, `magenta`, `gray`

- slide:
    highlight: "::preview a"
    controller: verifyStyles
    content: |
      Try navigating between the two pages by clicking on the links in the [define preview_area].

      You should see the new background color on both the `index.html` and `about.html` pages.

- slide:
    emote: happy
    mode: overlay
    content: |
      They're still a lot left to learn about CSS but for now we've made some good progress.

      Let's review what we've learned so far!

- question:
    title: What does **CSS** stand for?

    explain: |
      [define css] stands for Cascading Style Sheets which is a language used for describing the visual appearance of [define html] documents.

    choices:
      - Cascading Style Sheets
      - Central Style System
      - Cover, Stencil, and Slice
      - Creative Syntax for Styles

- question:
    title: What is the `highlighted` section of code called?

    content: |
      [snippet quiz_example highlight:0,2]

    explain: |
      A [define css_selector] identifies the [define html_element Element] that each of the [define css_declaration ls] should be applied to.

    choices:
      - A selector
      - A segmenter
      - A property
      - A value

- question:
    title: What is the `highlighted` section of code called?

    content: |
      [snippet quiz_example highlight:6,10]

    explain: |
      The [define css] [define css_property l] is used to identify what attribute will be changed about an [define html_element]. This normally includes visual properties such as backgrounds, colors, and fonts.

    choices:
      - A property
      - A selector
      - A linker
      - A bytecode

- question:
    title: CSS can be linked on multiple pages?

    explain: |
      One of the biggest advantages to using [define css] is that it's easy to share the styles between many web pages by simply including a `link` [define html_element Element] to the correct [define css_stylesheet l].

    choices:
      - 'True'
      - 'False'

- slide:
    mode: popup
    content: |
      Experimenting with code is a great way to learn more about how it works. You're encouraged to continue making changes to these files before moving on.

      Great work, and I'll see you in the next lesson!
